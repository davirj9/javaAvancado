Com algumas configurações conseguimos utilizar uma biblioteca stand alone, como o Weld, da JBoss. 
Utilizando o maven para baixar as dependências fica fácil adicionar o Weld ao seu projeto, 
bastaria adicionar a dependência abaixo ao pom.xml: 

 <dependency>
    <groupId>org.jboss.weld.servlet</groupId>
    <artifactId>weld-servlet</artifactId>
    <version>2.4.5.Final</version>
</dependency> 


Depois, você só precisa fazer algumas configurações. 
Uma delas é criar o arquivo META-INF/beans.xml, como o seguinte conteúdo: 

 <?xml version="1.0" encoding="UTF-8"?>  
  <beans xmlns="http://java.sun.com/xml/ns/javaee"  
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">  
  </beans> 


Em um ambiente Java EE apenas a presença desse arquivo é suficiente para ativar o suporte a CDI. 
Porém, no Tomcat precisamos de alguns passos a mais. 
Primeiro criamos o arquivo META-INF/context.xml com o seguinte conteúdo: 

 <Context>  
      <Resource name="BeanManager"  
                auth="Container"  
                type="javax.enterprise.inject.spi.BeanManager"  
                factory="org.jboss.weld.resources.ManagerObjectFactory"/>  
  </Context> 


Através do recurso configurado nesse arquivo será possível localizar a BeanManager, 
classe que por sua vez disponibilizará as dependências em tempo de execução, quando forem necessárias. 
Uma vez que essa classe já é fornecida pelo Weld, nos não precisaremos escrevê-la, 
apenas descrever através dessas configurações como localizá-la. 

E para finalizar adicionamos a seguinte declaração no arquivo WEB-INF/web.xml: 

 <resource-env-ref>  
      <resource-env-ref-name>BeanManager</resource-env-ref-name>  
      <resource-env-ref-type>javax.enterprise.inject.spi.BeanManager</resource-env-ref-type>  
  </resource-env-ref> 


Com isso você já poderá utilizar a CDI em seus projetos. 